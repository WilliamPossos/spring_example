package hello.controller;

import com.fasterxml.jackson.databind.util.ArrayIterator;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import hello.data.User;
import hello.repository.UserRepository;
import hello.data.Autor;
import hello.data.Autor;
import hello.data.Libro;
import hello.data.User;
import hello.dto.AutorDTO;
import hello.dto.LibroDTO;
import hello.repository.UserRepository;
import hello.repository.AutorRepository;
import hello.repository.LibroRepository;
import java.util.ArrayList;
import java.util.List;

@Controller    // This means that this class is a Controller
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class MainController {
	@Autowired // This means to get the bean called userRepository
	           // Which is auto-generated by Spring, we will use it to handle the data
	private UserRepository userRepository;
        @Autowired 
	private AutorRepository autorRepository;
        
        @Autowired 
	private LibroRepository libroRepository;
	
	@GetMapping(path="/add") // Map ONLY GET Requests
	public @ResponseBody String addNewUser (@RequestParam String name
			, @RequestParam String email) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request
		
		User n = new User();
		n.setName(name);
		n.setEmail(email);
		userRepository.save(n);
		return "Saved";
	}
        @GetMapping(path="/addautor") // Map ONLY GET Requests
	public @ResponseBody String addNewAutor (@RequestParam String name
			, @RequestParam String email) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request
		
		Autor n = new Autor();
		n.setNombre(name);
		n.setIdentificacion(email);
		autorRepository.save(n);
		return "Saved";
	}
	
	@GetMapping(path="/all")
	public @ResponseBody Iterable<User> getAllUsers() {
		// This returns a JSON or XML with the users
		return userRepository.findAll();
	}
        @GetMapping(path="/libros")
        //public @ResponseBody Iterable<Libro> allBooks() {
	public @ResponseBody List<LibroDTO> allBooks() {
		// This returns a JSON or XML with the users
                //return libroRepository.findAll();
		Iterable<Libro> libros = libroRepository.findAll();
                List<LibroDTO> dto = new ArrayList<>();
                for (Libro libro : libros) {
                    LibroDTO ldto = new LibroDTO();
                    ldto.setId(libro.getId());
                    ldto.setNombre(libro.getNombre());
                    ldto.setAutors(libro.getAutors());
                    dto.add(ldto);
                
            }
                return dto;
	}
        @GetMapping(path="/autores")
	public @ResponseBody Iterable<Autor> allAuthors() {
		// This returns a JSON or XML with the users
		return  autorRepository.findAll();
                
	}
}
